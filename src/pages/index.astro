---
import Layout from "../layouts/Layout.astro";

import Card from "../components/Card.astro";

const response = await fetch(
  "https://api.github.com/repos/type-challenges/type-challenges/git/trees/main?recursive=1"
);

const data = await response.json();
const questions = data.tree.filter(
  (item) => item.path.includes("questions/") && item.type === "tree"
);

const easyQuestions = questions.filter((item) => item.path.includes("easy"));
const mediumQuestions = questions.filter((item) =>
  item.path.includes("medium")
);
const hardQuestions = questions.filter((item) => item.path.includes("hard"));
const extremeQuestions = questions.filter((item) =>
  item.path.includes("extreme")
);

function getName(question: { path: string }) {
  const path = question.path.slice("questions/".length);
  const name = path.split("-")[2];
  const number = path.split("-")[0];

  return {
    short: `${number}-${name}`,
    path,
  };
}

// Cache this page
const CACHE_TIME = 10 * 60;
Astro.response.headers.set(
  "Cache-Control",
  `s-maxage=${CACHE_TIME}, stale-while-revalidate`
);
---

<Layout title="Type Solutions">
  <main>
    <h1>Type Solutions</h1>
    <p>A simple way to explore type-challenges solutions</p>
  </main>
  <div class="cols">
    <div>
      <h3>Easy</h3>
      <ul>
        {
          easyQuestions.map((item) => (
            <li>
              <a href={`/${item.path}`}>{getName(item).short}</a>
            </li>
          ))
        }
      </ul>
    </div>
    <div>
      <h3>Medium</h3>
      <ul>
        {
          mediumQuestions.map((item) => (
            <li>
              <a href={`/${item.path}`}>{getName(item).short}</a>
            </li>
          ))
        }
      </ul>
    </div>
    <div>
      <h3>Hard</h3>
      <ul>
        {
          hardQuestions.map((item) => (
            <li>
              <a href={`/${item.path}`}>{getName(item).short}</a>
            </li>
          ))
        }
      </ul>
    </div>
    <div>
      <h3>Extreme</h3>
      <ul>
        {
          extremeQuestions.map((item) => (
            <li>
              <a href={`/${item.path}`}>{getName(item).short}</a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</Layout>

<style>
  :root {
    --astro-gradient: linear-gradient(0deg, #4f39fa, #da62c4);
  }

  h1 {
    margin: 2rem 0;
  }

  main {
    text-align: center;
  }

  .cols {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }

  .cols div {
    padding: 1rem;
  }

  .text-gradient {
    font-weight: 900;
    background-image: var(--astro-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 100% 200%;
    background-position-y: 100%;
    border-radius: 0.4rem;
    animation: pulse 4s ease-in-out infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      background-position-y: 0%;
    }
    50% {
      background-position-y: 80%;
    }
  }

  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    background: #4f39fa;
    padding: 1rem;
    border-radius: 0.4rem;
    color: var(--color-bg);
  }

  .instructions code {
    font-size: 0.875em;
    border: 0.1em solid var(--color-border);
    border-radius: 4px;
    padding: 0.15em 0.25em;
  }

  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
